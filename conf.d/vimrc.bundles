" vim: set sw=4 ts=4 sts=4 et tw=78 foldmarker={,} foldlevel=0 foldmethod=marker spell:

set nocompatible        " Must be first line
set background=dark

" Setup Bundle Support {
" The next three lines ensure that the ~/.vim/bundle/ system works
filetype off
set rtp+=~/.vim/bundle/vundle
call vundle#rc()
" }

" Bundles {

" Deps {
Bundle 'gmarik/vundle'
Bundle 'MarcWeber/vim-addon-mw-utils'
"Bundle 'tomtom/tlib_vim'
if executable('ag')
    Bundle 'mileszs/ack.vim'
    let g:ackprg = 'ag --nogroup --nocolor --column --smart-case'
elseif executable('ack-grep')
    let g:ackprg="ack-grep -H --nocolor --nogroup --column"
    Bundle 'mileszs/ack.vim'
elseif executable('ack')
    Bundle 'mileszs/ack.vim'
endif
" }

if !exists('g:spf13_bundle_groups')
    let g:spf13_bundle_groups=['general', 'neocomplete', 'programming', 'php', 'python', 'javascript', 'html', 'misc']
endif

"   let g:override_spf13_bundles = 1
if !exists("g:override_spf13_bundles")

    " General {
    if count(g:spf13_bundle_groups, 'general')
        Bundle 'scrooloose/nerdtree'
        Bundle 'spf13/vim-colors'
        Bundle 'tpope/vim-surround'
        Bundle 'matchit.zip'
        Bundle 'bling/vim-airline'
        Bundle 'bufexplorer.zip'
        Bundle 'godlygeek/csapprox'
        Bundle 'jistr/vim-nerdtree-tabs'
        Bundle 'flazz/vim-colorschemes'
        Bundle 'nathanaelkane/vim-indent-guides'
    endif
    " }

    " General Programming {
    if count(g:spf13_bundle_groups, 'programming')
        Bundle 'tpope/vim-fugitive'
        Bundle 'scrooloose/nerdcommenter'
        "Bundle 'godlygeek/tabular'
        Bundle 'Align'
        if executable('ctags')
            Bundle 'majutsushi/tagbar'
        endif
    endif
    " }

    " Snippets & AutoComplete {
    if count(g:spf13_bundle_groups, 'snipmate')
        Bundle 'garbas/vim-snipmate'
        Bundle 'honza/vim-snippets'
        " Source support_function.vim to support vim-snippets.
        if filereadable(expand("~/.vim/bundle/vim-snippets/snippets/support_functions.vim"))
            source ~/.vim/bundle/vim-snippets/snippets/support_functions.vim
        endif
    elseif count(g:spf13_bundle_groups, 'neocomplete')
        Bundle 'Shougo/neocomplete.vim.git'
        Bundle 'Shougo/neosnippet'
        Bundle 'honza/vim-snippets'
    endif
    " }

    " PHP {
    "if count(g:spf13_bundle_groups, 'php')
    " Bundle 'spf13/PIV'
    " Bundle 'arnaud-lb/vim-php-namespace'
    "endif
    " }

    " Python {
    if count(g:spf13_bundle_groups, 'python')
        " Pick either python-mode or pyflakes & pydoc
        Bundle 'klen/python-mode'
        " Bundle 'python.vim'
        " Bundle 'python_match.vim'
        " Bundle 'pythoncomplete'
    endif
    " }

    " Javascript {
    if count(g:spf13_bundle_groups, 'javascript')
        Bundle 'elzr/vim-json'
        Bundle 'groenewege/vim-less'
        Bundle 'pangloss/vim-javascript'
        Bundle 'briancollins/vim-jst'
    endif
    " }

    " HTML {
    if count(g:spf13_bundle_groups, 'html')
        " Bundle 'amirh/HTML-AutoCloseTag'
        Bundle 'hail2u/vim-css3-syntax'
    endif
    " }

    " Misc {
    if count(g:spf13_bundle_groups, 'misc')
        Bundle 'tpope/vim-markdown'
        "Bundle 'spf13/vim-preview'
        Bundle "DoxygenToolkit.vim"
    endif
    " }

endif

" }

" General {
" set autowrite                  " automatically write a file when leaving a modified buffer
set shortmess+=filmnrxoOtT      " Abbrev. of messages (avoids 'hit enter')
" }
