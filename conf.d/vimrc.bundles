" vim: set sw=2 ts=2 sts=2 et tw=78 foldmarker={{{,}}} foldlevel=0 foldmethod=marker spell:

set nocompatible        " Must be first line
set background=dark

" Generates a condition for Plug function
function! PlugCond(cond, ...)
  let opts = get(a:000, 0, {})
  return a:cond ? opts : extend(opts, { 'on': [], 'for': [] })
endfunction


" Plugins {{{

" Dependencies {{{
Plug 'MarcWeber/vim-addon-mw-utils'
if executable('ag')
  Plug 'mileszs/ack.vim'
  let g:ackprg = 'ag --nogroup --nocolor --column --smart-case'
elseif executable('ack-grep')
  let g:ackprg="ack-grep -H --nocolor --nogroup --column"
  Plug 'mileszs/ack.vim'
elseif executable('ack')
  Plug 'mileszs/ack.vim'
endif
" }}}

if !exists('g:my_bundle_groups')
  let g:my_bundle_groups=['general', 'php', 'python', 'cpp', 'javascript', 'html', 'misc', 'syntax']
endif

"   let g:override_my_bundles = 1
if !exists("g:override_my_bundles")

  if count(g:my_bundle_groups, 'general')
    Plug 'scrooloose/nerdtree'
    Plug 'spf13/vim-colors'
    Plug 'tpope/vim-surround'
    Plug 'tmhedberg/matchit'
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    Plug 'jlanzarotta/bufexplorer'
    Plug 'godlygeek/csapprox'
    Plug 'jistr/vim-nerdtree-tabs'
    Plug 'flazz/vim-colorschemes'
    Plug 'nathanaelkane/vim-indent-guides'
    Plug 'Shougo/vimproc.vim'
    Plug 'thinca/vim-localrc'

    "Plug 'Valloric/YouCompleteMe'
    Plug 'neoclide/coc.nvim', {'tag': '*', 'branch': 'release'}
  endif

  if count(g:my_bundle_groups, 'syntax')
    " ALE plugin is better than `syntastic` because of its asynchronous features
    Plug 'w0rp/ale'
    "Plug 'vim-syntastic/syntastic'
  endif

  Plug 'tpope/vim-fugitive'
  Plug 'tpope/vim-rhubarb' " For :Gbrowse on GitHub
  Plug 'tommcdo/vim-fubitive' " For :Gbrowse on Bitbucket
  Plug 'scrooloose/nerdcommenter'
  Plug 'vim-scripts/Align'
  Plug 'Raimondi/delimitMate'
  if executable('ctags')
    Plug 'majutsushi/tagbar'
  endif
  Plug 'terryma/vim-multiple-cursors'

  " General completion and snippets
  "Plug 'ncm2/ncm2'

  "Plug 'Shougo/deoplete.nvim', { 'do': 'UpdateRemotePlugin' }

  " Remote plugin framework for deoplete and ncm2
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc', PlugCond(!has('nvim'))

  Plug 'Shougo/neosnippet'
  Plug 'Shougo/neosnippet-snippets'
  Plug 'honza/vim-snippets'

  if count(g:my_bundle_groups, 'php')
    " Improved automatic folding based on syntax
    Plug 'rayburgemeestre/phpfolding.vim'

    " Debugger
    Plug 'joonty/vdebug'
    Plug 'arnaud-lb/vim-php-namespace'

    " PHP completion and introspection
    Plug 'phpactor/phpactor', { 'do': 'composer install', 'for': 'php' }
    "Plug 'roxma/ncm-phpactor', PlugCond(has('nvim'))

    "Plug 'phpactor/ncm2-phpactor'

    "Plug 'lvht/phpcd.vim', { 'for': 'php', 'do': 'composer install' }

    " Multi-entry selection UI
    Plug 'junegunn/fzf'
    " .twig syntax support
    Plug 'evidens/vim-twig'
  endif

  if count(g:my_bundle_groups, 'cpp')
    "Plug 'Rip-Rip/clang_complete'
    "Plug 'prabirshrestha/async.vim'
    "Plug 'prabirshrestha/vim-lsp'
    "Plug 'prabirshrestha/asyncomplete.vim'
    "Plug 'prabirshrestha/asyncomplete-lsp.vim'
  endif

  if count(g:my_bundle_groups, 'ruby')
    Plug 'vim-ruby/vim-ruby'
    Plug 'tpope/vim-rails'
  endif

  if count(g:my_bundle_groups, 'python')
    " Pick either python-mode or pyflakes & pydoc
    Plug 'klen/python-mode'
    " Plug 'python.vim'
    " Plug 'python_match.vim'
    " Plug 'pythoncomplete'
  endif

  if count(g:my_bundle_groups, 'javascript')
    Plug 'elzr/vim-json'
    Plug 'groenewege/vim-less'
    Plug 'pangloss/vim-javascript'
    Plug 'briancollins/vim-jst'
    Plug 'leafgarland/typescript-vim'
  endif

  if count(g:my_bundle_groups, 'html')
    " Plug 'amirh/HTML-AutoCloseTag'
    Plug 'hail2u/vim-css3-syntax'
  endif

  if count(g:my_bundle_groups, 'misc')
    Plug 'tpope/vim-markdown'
    " vim-notes depends on vim-misc
    Plug 'xolox/vim-misc'
    Plug 'xolox/vim-notes'
  endif

  if exists("g:my_bundle_syntax")
    for b in g:my_bundle_syntax
      Plug b
    endfor
  endif

  if exists("g:my_bundle_custom")
    for b in g:my_bundle_custom
      Plug b
    endfor
  endif
endif
" }}}

set shortmess+=filmnrxoOtT      " Avoids 'hit enter'

" vim-plug initialization end
call plug#end()
